import { authMiddleware } from '@clerk/nextjs';
 
export default authMiddleware({
  publicRoutes: [
    '/',
    '/api',
    '/about',
    '/contact',
    '/onboarding(.*)',
    '/sign-in(.*)',
    '/sign-up(.*)',
    '/api/webhooks(.*)',
  ],
  ignoredRoutes: [
    '/api/webhooks(.*)',
  ],
  afterAuth(auth, req) {
    // If user is not signed in and trying to access protected pages,
    // redirect them to sign in
    if (!auth.userId && !auth.isPublicRoute) {
      const signInUrl = new URL('/sign-in', req.url);
      signInUrl.searchParams.set('redirect_url', req.url);
      return Response.redirect(signInUrl);
    }

    // If user is signed in
    if (auth.userId) {
      // Get user metadata
      const metadata = auth.sessionClaims?.unsafeMetadata as { 
        role?: string; 
        onboardingComplete?: boolean; 
      } | undefined;

      // Skip middleware for API routes
      if (req.nextUrl.pathname.startsWith('/api/')) {
        return;
      }

      // If no role selected and not on role selection page,
      // redirect to role selection
      if (!metadata?.role && !req.nextUrl.pathname.startsWith('/sign-up/role')) {
        return Response.redirect(new URL('/sign-up/role', req.url));
      }

      // If role selected but onboarding not complete,
      // redirect to onboarding (unless already on onboarding page)
      if (metadata?.role && !metadata?.onboardingComplete && 
          !req.nextUrl.pathname.startsWith('/onboarding')) {
        return Response.redirect(new URL(`/onboarding/${metadata.role.toLowerCase()}`, req.url));
      }

      // If trying to access onboarding or role pages when already onboarded,
      // redirect to dashboard
      if (metadata?.onboardingComplete && 
          (req.nextUrl.pathname.startsWith('/onboarding') || 
           req.nextUrl.pathname === '/sign-up/role')) {
        return Response.redirect(new URL(`/dashboard/${metadata.role?.toLowerCase()}`, req.url));
      }
    }
  }
});
 
export const config = {
  matcher: ['/((?!.+\\.[\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],
};